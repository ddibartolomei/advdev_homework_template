// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    def serviceId = "mlbparks"
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"
    echo "serviceId: ${serviceId}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    def mvnCmd = "mvn -s ./nexus_settings.xml"

    // Checkout Source Code
    stage('Checkout Source') {
      checkout scm
    }

    sh "cp nexus_settings.xml MLBParks/nexus_settings.xml"

    dir ('MLBParks') {
      // replace 'GUID' in the nexus_settings.xml file with ${GUID} to point to the right Nexus instance
      sh "sed -i -- 's/GUID/${GUID}/g' nexus_settings.xml"

      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version and other properties from the pom.xml
      def groupId    = getGroupIdFromPom("pom.xml")
      def artifactId = getArtifactIdFromPom("pom.xml")
      def version    = getVersionFromPom("pom.xml")

      // Set the tag for the development image: version + build number
      def devTag  = "${version}-${BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = "${version}"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${version}"
        sh "${mvnCmd} clean package -DskipTests"
      }

      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"
        sh "${mvnCmd} test"
      }

      // Using Maven call SonarQube for Code Analysis
      stage('Code Analysis') {
        echo "Running Code Analysis"
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER}/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"
        sh "oc start-build ${serviceId} --follow --from-file=./target/${serviceId}.war -n ${GUID}-parks-dev"
        openshiftTag alias: 'false', destStream: '${serviceId}', destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: '${serviceId}', srcTag: 'latest', verbose: 'false'
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"
        sh "oc set image dc/${serviceId} ${serviceId}=docker-registry.default.svc:5000/${GUID}-parks-dev/${serviceId}:${devTag} -n ${GUID}-parks-dev"
        openshiftDeploy depCfg: '${serviceId}', namespace: '${GUID}-parks-dev', verbose: 'false', waitUnit: 'sec', waitTime: ''
        openshiftVerifyDeployment depCfg: '${serviceId}', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitUnit: 'sec', waitTime: ''
        openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: '${serviceId}', verbose: 'false'
      }

      // Run Integration Tests in the Development Environment.
      stage('Integration Tests') {
        echo "Running Integration Tests"
        // TBD
      }

      // Copy Image to Nexus Docker Registry
      stage('Copy Image to Nexus Docker Registry') {
        echo "Copy image to Nexus Docker Registry"
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/${serviceId}:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/${serviceId}:${devTag}"

        // Tag built image with production tag
        openshiftTag alias: 'false', destStream: '${serviceId}', destTag: prodTag, destinationNamespace: '${GUID}-parks-dev', srcStream: '${serviceId}', srcTag: devTag, namespace: '${GUID}-parks-dev', verbose: 'false'
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      // Do not activate the new version yet.
      def destApp   = "${serviceId}-green"
      def passiveApp   = "${serviceId}-blue"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        activeApp = sh(returnStdout: true, script: "oc get route ${serviceId} -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()
        if (activeApp == "${serviceId}-green") {
          destApp = "${serviceId}-blue"
          passiveApp = "${serviceId}-green"
        }
        echo "Active Application is:      " + activeApp
        echo "Destination Application is: " + destApp
        echo "Passive Application is: " + passiveApp

        // Update the Image on the prod dc
        sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/${serviceId}:${prodTag} -n ${GUID}-parks-prod"

        // Deploy the inactive application.
        openshiftDeploy depCfg: destApp, namespace: '${GUID}-parks-prod', verbose: 'false', waitUnit: 'sec', waitTime: ''
        openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-parks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitUnit: 'sec', waitTime: ''
        openshiftVerifyService namespace: '${GUID}-parks-prod', svcName: destApp, verbose: 'false'
      }

      stage('Switch over to new Version') {
        // Service label "switch" by service re-creation in order to invalidate discovered backend services cache
        echo "'Moving' label type=parksmap-backend to ${destApp} (recreating blue/green services)."
        sh "oc delete svc ${serviceId}-green -n ${GUID}-parks-prod"
        sh "oc delete svc ${serviceId}-blue -n ${GUID}-parks-prod"
        sh "oc expose dc ${destApp} --port 8080 -l type=parksmap-backend -n ${GUID}-parks-prod"
        sh "oc expose dc ${passiveApp} --port 8080 -n ${GUID}-parks-prod"

        echo "Switching Production application to ${destApp}."
        sh 'oc patch route ${serviceId} -n ${GUID}-parks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
